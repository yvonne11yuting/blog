{"data":{"markdownRemark":{"html":"<h2>git筆記</h2>\n<h3>git push</h3>\n<ul>\n<li>\n<p>將commit的內容推上遠端repo</p>\n<ul>\n<li>-u: 將遠端repo branch設為追蹤目標</li>\n<li>\n<p>--delete origin [branch name]: 移除遠端branch</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push <span class=\"token punctuation\">[</span>remote<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>branch<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>遠端repo建立新branch</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin master:<span class=\"token punctuation\">[</span>branch name<span class=\"token punctuation\">]</span></code></pre></div>\n<p>以上指令等同於</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout -b <span class=\"token punctuation\">[</span>branch name<span class=\"token punctuation\">]</span>\n<span class=\"token function\">git</span> push origin <span class=\"token punctuation\">[</span>branch name<span class=\"token punctuation\">]</span></code></pre></div>\n<p>※ 建立完branch別忘了clone</p>\n</li>\n</ul>\n<h3>git clone</h3>\n<p>複製已存在的remote repo到本地端</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span></code></pre></div>\n<h3>git pull</h3>\n<p>把遠端repo修改的內容合併到本地端，等同於fetch + merge</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull <span class=\"token punctuation\">[</span>remote<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>branch<span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>\n<p>--rebase: 從遠端repo更新時減少不必要的merge，即：</p>\n<ol>\n<li>把本地repo從上次pull後的變更儲存</li>\n<li>回復至上次pull時的狀態</li>\n<li>套用遠端的變更</li>\n<li>再套用剛剛站存下來的本地變更</li>\n</ol>\n</li>\n</ul>\n<h3>git add (add files to stage)</h3>\n<ul>\n<li>[path]: 增加檔案或目錄到stage</li>\n<li>-u: 不處理untracked的檔案</li>\n<li>-A / . :不管tracked或是untracked的檔案都加到stage上</li>\n</ul>\n<h3>git commit (staged)</h3>\n<p>提交加到stage的檔案</p>\n<ul>\n<li>-m : 可以直接添加commit message</li>\n</ul>\n<h3>git branch</h3>\n<p>列出目前本地端所有的branch</p>\n<ul>\n<li>-r: 列出remote repo 所有branch</li>\n<li>-d [branch]: 移除本地端branch</li>\n</ul>\n<h3>git checkout</h3>\n<ul>\n<li>[branch name]: 切換branch</li>\n<li>[filename]: 還原本地端修改的檔案內容</li>\n</ul>\n<h3>git merge</h3>\n<p>合併branch</p>\n<ul>\n<li>--no-ff [branch name]: 保留branch合併的記錄，merge後會產生新的commit\n<img src=\"https://i.stack.imgur.com/FMD5h.png\" alt=\"image\"></li>\n</ul>\n<blockquote>\n<p>reference: <a href=\"https://stackoverflow.com/questions/9069061/what-is-the-difference-between-git-merge-and-git-merge-no-ff\">What is the difference between <code class=\"language-text\">git merge</code> and <code class=\"language-text\">git merge --no-ff</code>?</a></p>\n</blockquote>\n<h3>git rebase</h3>\n<p>與git merge類似都有合併branch的功能，差異點在於：</p>\n<ul>\n<li>merge: 修改的歷史記錄會維持原狀，但合併後的記錄會變得更複雜</li>\n<li>\n<p>rebase: 修改內容的歷史記錄會接在要合併的分支後面，合併後的記錄會比較清楚，但會比使用merge更容易發生衝突</p>\n<ul>\n<li>git rebase -i [commit hash]: 精簡commit記錄，commit hash指定要合併的最早節點，合併HEAD到指定的commit節點，接著進入編輯模式</li>\n<li>pick: 直接使用這個commit，不做任何調整</li>\n<li>reword: 使用這個commit，只調整commit message</li>\n<li>squash: 使用這個commit並融入前一個commit中，合併兩個commit message（可以修改)</li>\n<li>fixup: 使用這個commit並融入前一個commit中，合併兩個commit message（不能修改)</li>\n<li>drop: 直接移除這個commit</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>reference: <a href=\"https://dotblogs.com.tw/wasichris/2016/05/04/re\">[Git] Rebase - 使用 Interactive 模式來精簡 commit 紀錄</a></p>\n</blockquote>\n<h3>git status</h3>\n<p>顯示目前修改的檔案清單</p>\n<h3>git diff</h3>\n<p>顯示修改的檔案差異</p>\n<ul>\n<li>--staged/--cached: 已經上stage的檔案列出差異</li>\n</ul>\n<h3>git reset</h3>\n<ul>\n<li>--mixed: 還原已經add至stage的檔案，仍保存修改 (default)</li>\n<li>--hard: 還原已經add至stage的檔案，並捨棄之前的修改</li>\n</ul>\n<h3>git revert</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> revert <span class=\"token punctuation\">[</span>commit hash<span class=\"token punctuation\">]</span></code></pre></div>\n<p>建立一個新的commit來還原已經commit的修改(尚未執行git push)</p>\n<h3>git mv</h3>\n<p>重新命名或搬移檔案</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">mv</span> <span class=\"token punctuation\">[</span>origin file<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>rename file/destination<span class=\"token punctuation\">]</span></code></pre></div>\n<h3>git log</h3>\n<p>觀看commit的log記錄</p>\n<ul>\n<li>[remote/branch]: 查看特定的branch \blog</li>\n<li>--oneline: 只顯示hash和log message</li>\n<li>--author=\"username\": 顯示特定開發者的commit log</li>\n</ul>\n<h3>tig</h3>\n<p>需另外安裝，maxOS安裝tig透過brew，指令如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> tig</code></pre></div>\n<p>可以代替git log, git diff 以及 git blame等指令直接瀏覽commit記錄</p>\n<ul>\n<li>q: 離開</li>\n<li>j/k: 上下移動</li>\n<li>return/enter: 查看commit的詳細內容</li>\n<li>t: 對選中的commit按<strong>t</strong>進入tree view，可以查看當時repo的內容</li>\n<li>C: tig後若有接branch名稱，直接在該commit上按大寫<strong>C</strong>可以cherry-pick回目前的branch</li>\n</ul>\n<h3>git stash</h3>\n<p>暫存修改不commit</p>\n<ul>\n<li>list: 列出暫存的項目</li>\n<li>apply: 使用暫存的修改但不移除stash，可指定stash使用，如：<code class=\"language-text\">git stash apply stash@{0}</code></li>\n<li>pop: 使用暫存的stash並從stash移除</li>\n<li>drop: 移除stash上的項目，並可指定stash，如：<code class=\"language-text\">git stash drop stash@{0}</code></li>\n<li>\n<p>stash show -p stash@{0}: 查看已儲存的stash@{0}和目前本地repo的diff</p>\n<ul>\n<li><code class=\"language-text\">git stash show -p stash@{0}</code> 等同於 <code class=\"language-text\">git show stash@{0}</code></li>\n</ul>\n</li>\n</ul>\n<h3>git apply</h3>\n<p>使用補丁(patch)。前置作業：</p>\n<ul>\n<li>產生補丁: 透過<code class=\"language-text\">git diff &gt; xxx.patch</code>產生補丁檔</li>\n<li>使用補丁: <code class=\"language-text\">git apply xxx.patch</code></li>\n</ul>\n<h3>git blame</h3>\n<ul>\n<li>[file name]: 查看每行修改記錄</li>\n<li>\n<p>-L [start line],[end line]: 指定行數</p>\n<ul>\n<li>範例：<code class=\"language-text\">git blame -L 5,10 index.js</code></li>\n</ul>\n</li>\n</ul>","frontmatter":{"date":"December 16, 2018","path":"/git","title":"git指令筆記"}}},"pageContext":{}}